import Database from 'better-sqlite3'
import { client, xml } from '@xmpp/client'
// import 'dotenv'
import fetch from 'node-fetch'
import cron from 'node-cron'

console.log('--- start')

const dbPath = process.env.DB_PATH || '/external_db/database.sqlite'
const db = new Database(dbPath)

db.exec(`
  CREATE TABLE IF NOT EXISTS subscriptions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    jid TEXT NOT NULL,
    lat TEXT NOT NULL,
    lon TEXT NOT NULL,
    time TEXT NOT NULL
  );
`)

const WRONG_COORDS_MESSAGE = '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–Ω–µ –Ω–µ –ø–æ–Ω—è—Ç–Ω—ã (._. ) –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ get:LAT,LON'
const START_MESSAGE = '–ö–∏–¥–∞–π —Å—é–¥–∞ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –í–æ –º–Ω–æ–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö —ç—Ç–æ `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ`.'

const SUBCRIBE_MESSAGE = `
–ô–æ–æ–æ–æ–æ–æ—É! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ–∑–¥—É—à–Ω—ã—Ö –∑–º–µ–µ–≤! 
–ü–∏—à–∏ \`start\` —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.
–ü–∏—à–∏ \`!stop\` —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.
–ò –æ—Ç–∫–ª—é—á–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∑–Ω–∞—á–æ–∫ –∑–∞–º–æ—á–∫–∞.
–î–∞–≤–∞–π –∑–∞–ø—É—Å—Ç–∏–º –ø–∞—Ä—É –∑–º–µ–µ–≤ –≤ –Ω–µ–±–æ! –ü–∏—à–∏ \`start\`.
`

const COORDS_SAVE_MESSAGE = `
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! 
–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00.
–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –≤–∏–¥–µ \`8:00\`.
–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å \`now\` —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–º–µ—è —Å–µ–π—á–∞—Å.
`

const STOP_MESSAGE = '–î–∞ –ø–æ–∂–∞–ª—É–∏—Å—Ç–∞. –¢—ã —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã. –ü—É—Å—Ç—å –º–æ–ª–Ω–∏—è —É–¥–∞—Ä–∏—Ç –≤ —Ç–≤–æ–π –≤–æ–∑–¥—É—à–Ω—ã–π –∑–º–µ–π, –ø–∞–¥–ª–∞.'
const CREATE_MESSAGE = '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –∑–º–µ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ '
const COORDS_FIRST_MESSAGE = '–¢–∞–∫. –ù—É —á—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ —Ç–µ–±–µ? –°–Ω–∞—á–∞–ªa –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã -_-* —É—Ñ—Ñ—Ñ....'
const OTHER_MESSAGE = '–î–∞ —á—Ç–æ —Ç–µ–±–µ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ??? –Ø –∂–µ —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ –Ω–∞–¥–æ –¥–µ–ª–∞—Ç—å...'

const xmpp = client({
  service: process.env.XMPP_SERVICE ?? 'xmpp://wave.crabdance.com:5222',
  domain: process.env.XMPP_DOMAIN ?? 'wave.crabdance.com',
  lang: 'RU',
  username: 'kitebot',
  password: process.env.XMPP_PASSWORD
})

xmpp.on('online', async (address) => {
  console.log('Weather Bot –∑–∞–ø—É—â–µ–Ω! –ê–¥—Ä–µ—Å—Å ', address)
  await xmpp.send(xml('presence'))
})

xmpp.on('error', async (error: Error) => {
  console.log('Error: ', error)
})

xmpp.on('stanza', async (stanza) => {
  if (stanza.is('presence')) {
    const from = stanza.attrs.from.split("/")[0]
    const type = stanza.attrs.type

    if (type === 'subscribe') {
      xmpp.send(xml('presence', { to: from, type: "subscribed" }))
      sendMessage(from, SUBCRIBE_MESSAGE)
    }
  }

  if (stanza.is('message') && stanza.attrs.type === 'chat') {
    const body = stanza.getChildText('body')
    console.log('---message: ' + stanza.getChild('encrypted'))
    const from = stanza.attrs.from.split("/")[0]

    if (!body) {
      return
    }

    if (body.toLowerCase() === "start") {
      sendMessage(from, START_MESSAGE)
    } else if (isCoords(body)) {
      processingSetCoordsMessage(from, body)
    } else if (isTime(body)) {
      processingSetTimeMessage(from, body)
    } else if (body.toLowerCase() === '!stop') {
      processingStopMessage(from)
    } else if (body.toLowerCase() === 'now') {
      const sub = getSubscription(from) as any
      const report = await getKiteMessage(sub.lat, sub.lon)
      sendMessage(sub.jid, report.text)
    } else {
      sendMessage(from, OTHER_MESSAGE)
    }
  }
})

xmpp.start()

function sendMessage(to: string, text: string) {
  xmpp.send(
    xml(
      'message',
      { type: 'chat', to },
      xml("body", {}, text)
    )
  )
}

cron.schedule('* * * * *', async () => {
  const now = new Date()
  const hhmm = now.toTimeString().slice(0, 5)


  const subs = getAllSubscription() as any

  for (const sub of subs) {
    if (sub.time === hhmm) {
      const report = await getKiteMessage(sub.lat, sub.lon)
      sendMessage(sub.jid, report.text)
    }
  }
})

interface KiteMessage {
  text: string;
}
 
interface OpenMeteoResponse {
  current_weather: {
    temperature: number;
    windspeed: number;
    winddirection: number;
  };
  daily: {
    sunrise: string;
    sunset: string;
    precipitation_sum: number[];
    cloudcover_max: number[];
  };
}
 
export async function getKiteMessage(lat: number, lon: number): Promise<KiteMessage> {
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&daily=sunrise,sunset,precipitation_sum,cloudcover_max&timezone=auto`
  const res = await fetch(url);
  if (!res.ok) {
    return { text: "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ." }
  }
 
  const data: OpenMeteoResponse = await res.json() as OpenMeteoResponse
 
  const temp = data.current_weather.temperature
  const windSpeed = data.current_weather.windspeed
  const windDir = data.current_weather.winddirection
  const sunrise = new Date(data.daily.sunrise[0])
  const sunset = new Date(data.daily.sunset[0])
  const precipitation = data.daily.precipitation_sum[0]
  const cloudCover = data.daily.cloudcover_max[0]
 
  let windMsg = ""
  let sunMsg = ""
  let overallMsg = ""
 
  if (windSpeed < 2) {
    windMsg = "üí® –°–µ–≥–æ–¥–Ω—è –≤–µ—Ç–µ—Ä –ø–æ—á—Ç–∏ –Ω–µ –¥—É–µ—Ç. –ó–º–µ–π –µ–¥–≤–∞ –ª–∏ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è."
  } else if (windSpeed <= 5) {
    windMsg = "üå¨ –õ—ë–≥–∫–∏–π –∏ –ø—Ä–∏—è—Ç–Ω—ã–π –≤–µ—Ç–µ—Ä ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –ø–æ–ª—ë—Ç–∞ –∑–º–µ—è!"
  } else if (windSpeed <= 10) {
    windMsg = "üí® –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä! –ó–º–µ–π –≤–∑–ª–µ—Ç–∏—Ç –≤—ã—Å–æ–∫–æ, –¥–µ—Ä–∂–∏ –ø–æ–∫—Ä–µ–ø—á–µ –Ω–∏—Ç–∫—É ü™Å"
  } else {
    windMsg = "üå™ –°–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä! –û–ø–∞—Å–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∑–º–µ—è."
  }
 
  if (precipitation > 0.1 || cloudCover > 80) {
    sunMsg = "‚òÅÔ∏è –ü–ª–æ—Ö–æ–µ —Å–æ–ª–Ω—Ü–µ ‚Äî –¥–æ–∂–¥—å –∏–ª–∏ –æ–±–ª–∞—á–Ω–æ—Å—Ç—å. –õ—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–º–µ—è –¥–æ–º–∞."
  } else if (cloudCover > 50) {
    sunMsg = "‚õÖ –°–æ–ª–Ω—Ü–µ –ø—Ä—è—á–µ—Ç—Å—è –∑–∞ –æ–±–ª–∞–∫–∞–º–∏, –Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∑–º–µ—è –≤—Å—ë –µ—â—ë –º–æ–∂–Ω–æ."
  } else {
    sunMsg = "‚òÄÔ∏è –Ø—Ä–∫–æ–µ —Å–æ–ª–Ω—Ü–µ –∏ —á–∏—Å—Ç–æ–µ –Ω–µ–±–æ! –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—ë—Ç–∞ –∑–º–µ—è ü™Å"
  }
 
  if (windSpeed >= 2 && windSpeed <= 10 && cloudCover <= 50 && precipitation <= 0.1) {
    overallMsg = "üéâ –°–µ–≥–æ–¥–Ω—è –ø–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∑–º–µ—è! –õ–æ–≤–∏ –≤–µ—Ç–µ—Ä –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –ø–æ–ª—ë—Ç–æ–º!"
  } else if (windSpeed < 2) {
    overallMsg = "üò¥ –°–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π –≤–µ—Ç–µ—Ä. –ó–º–µ–π –µ–¥–≤–∞ –ª–∏ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è."
  } else if (windSpeed > 10) {
    overallMsg = "‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–π –≤–µ—Ç–µ—Ä! –ù–µ —Ä–∏—Å–∫—É–π –∑–∞–ø—É—Å–∫–∞—Ç—å –∑–º–µ—è."
  } else if (cloudCover > 80 || precipitation > 0.1) {
    overallMsg = "üåß –ü–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞ ‚Äî –¥–æ–∂–¥—å –∏–ª–∏ –æ–±–ª–∞—á–Ω–æ—Å—Ç—å. –õ—É—á—à–µ –æ—Ç–ª–æ–∂–∏—Ç—å –∑–∞–ø—É—Å–∫."
  } else {
    overallMsg = "ü§î –£—Å–ª–æ–≤–∏—è —Å—Ä–µ–¥–Ω–∏–µ. –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–º–µ—è, –Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ."
  }
 
  const message = `
üìç –ü–æ–≥–æ–¥–∞ –¥–ª—è ${getCityFromCoordinates(lat, lon)}:
üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}¬∞C
üå¨ –í–µ—Ç–µ—Ä: ${windSpeed} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${windDir}¬∞
‚òÄÔ∏è –í–æ—Å—Ö–æ–¥: ${sunrise.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
üåá –ó–∞–∫–∞—Ç: ${sunset.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
üåß –û—Å–∞–¥–∫–∏: ${precipitation} –º–º
‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${cloudCover}%
 
ü™Å –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–º–µ—è:
- –í–µ—Ç–µ—Ä: ${windMsg}
- –°–æ–ª–Ω—Ü–µ: ${sunMsg}
- –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${overallMsg}
`;
 
  return { text: message.trim() };
}

async function getCityFromCoordinates(lat: number, lon: number) {
  const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`)
  const data = await response.json() as any
  return data.address.city || data.address.town || data.address.village;
}

function createSubscription(
  from: string, 
  lat: number, 
  lon: number, 
  time: string
): void {
  db
    .prepare('INSERT INTO subscriptions (jid, lat, lon, time) VALUES (?, ?, ?, ?)')
    .run(from, lat, lon, time)
}

function getSubscription(from: string): unknown {
  return db
    .prepare('SELECT * from subscriptions WHERE jid=?')
    .get(from)
}

function getAllSubscription(): unknown {
  return db
    .prepare('SELECT * from subscriptions')
    .all()
}

function updateCoords(
  lat: number, 
  lon: number, 
  from: string
): void {
  db
    .prepare('UPDATE subscriptions SET lat=?, lon=? WHERE jid=?')
    .run(lat, lon, from)
}

function deleteSubscription(from: string): void {
  db
    .prepare('DELETE FROM subscriptions WHERE jid=?')
    .run(from)
}

function updateTime(from: string, time: string): void {
  db
    .prepare('UPDATE subscriptions SET time=? WHERE jid=?')
    .run(time, from)
}

function isTime(body: string) {
  return /^\d{2}:\d{2}$/.test(body)
}

function isCoords(body: string) {
  return body.startsWith('geo:')
}

function processingSetCoordsMessage(from: string, message: string): void {
  const coords = message.slice(4).split(',')

  if (coords.length === 2) {
    const lat = parseFloat(coords[0])
    const lon = parseFloat(coords[1])

    if (!isNaN(lat) && !isNaN(lon)) {
      const existing = getSubscription(from)

      if (existing) {
        updateCoords(lat, lon, from)
      } else {
        createSubscription(from, lat, lon, '08:00')
      }

      sendMessage(from, getCityFromCoordinates(lat, lon) + ' ' + COORDS_SAVE_MESSAGE)
    } else {
      sendMessage(from, WRONG_COORDS_MESSAGE)
    }
  } else {
    sendMessage(from, WRONG_COORDS_MESSAGE)
  }
}

function processingSetTimeMessage(from: string, message: string): void {
  const existing = getSubscription(from)

  if (existing) {
    updateTime(message, from)
    sendMessage(from, CREATE_MESSAGE + message)
  } else {
    sendMessage(from, COORDS_FIRST_MESSAGE)
  }
}

function processingStopMessage(from: string): void {
  deleteSubscription(from)
  sendMessage(from, STOP_MESSAGE)
}
